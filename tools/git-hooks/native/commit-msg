#!/bin/sh
# [AI-Generated-Copilot] - Native Git commit-msg hook

commit_file="$1"
commit_msg=$(cat "$commit_file")

# Function to transform commit message to AI-assisted format
transform_to_ai_assisted() {
    original_msg="$1"
    primary_tool="$2"
    author="$3"
    ai_files_list="$4"
    
    # Remove comments and empty lines, get first line
    original_msg=$(echo "$original_msg" | sed '/^#/d' | sed '/^$/d' | head -1)
    
    # Try to parse conventional commit format
    type=$(echo "$original_msg" | sed -n 's/^\([a-z]*\).*/\1/p')
    scope=""
    description=""
    
    if echo "$original_msg" | grep -q '^[a-z]*(.*).*:'; then
        # Has scope
        scope=$(echo "$original_msg" | sed -n 's/^[a-z]*(\([^)]*\)).*/\1/p')
        description=$(echo "$original_msg" | sed -n 's/^[a-z]*([^)]*):\s*\(.*\)/\1/p')
    elif echo "$original_msg" | grep -q '^[a-z]*:'; then
        # No scope
        description=$(echo "$original_msg" | sed -n 's/^[a-z]*:\s*\(.*\)/\1/p')
    else
        # Not conventional format
        type="feat"
        description="$original_msg"
    fi
    
    # Default scope if not specified
    ai_scope="Generated Code"
    if [ -n "$scope" ]; then
        ai_scope="$scope"
    fi
    
    # Create scope part for commit title
    scope_part=""
    if [ -n "$scope" ]; then
        scope_part="($scope)"
    fi
    
    # Create AI-assisted commit message
    cat > "$commit_file" << EOF
[AI-ASSISTED] $type$scope_part: $description

Generated by: $primary_tool
Reviewed by: $author
Scope: $ai_scope

Original commit message: $original_msg
AI-generated code found in: $ai_files_list
EOF
}

# Check if AI content was detected
if [ -f .git/AI_COMMIT_FLAG ]; then
  echo "ü§ñ AI-generated content detected - transforming commit message..."
  
  # Get AI files from the flag or scan again
  ai_files=$(git diff --cached --name-only | xargs grep -l "\[AI-Generated-[A-Za-z]*\]" 2>/dev/null || true)
  ai_files_list=$(echo "$ai_files" | tr '\n' ', ' | sed 's/, $//')
  
  # Extract primary AI tool from files
  primary_tool="GitHub Copilot"  # Default
  if [ -n "$ai_files" ]; then
    first_file=$(echo "$ai_files" | head -1)
    if grep -q "\[AI-Generated-Claude\]" "$first_file" 2>/dev/null; then
      primary_tool="Anthropic Claude"
    elif grep -q "\[AI-Generated-ChatGPT\]" "$first_file" 2>/dev/null; then
      primary_tool="OpenAI ChatGPT"
    elif grep -q "\[AI-Generated-Gemini\]" "$first_file" 2>/dev/null; then
      primary_tool="Google Gemini"
    elif grep -q "\[AI-Generated-Other\]" "$first_file" 2>/dev/null; then
      primary_tool="Other AI Tool"
    fi
  fi
  
  # Get author name
  author=$(git config user.name || echo "Developer")
  
  # Check if already AI-assisted format
  if ! echo "$commit_msg" | grep -q "^\[AI-ASSISTED\]"; then
    echo "‚ú® Transforming commit message to AI-assisted format..."
    transform_to_ai_assisted "$commit_msg" "$primary_tool" "$author" "$ai_files_list"
    echo "‚úÖ Commit message automatically updated!"
    echo "üìã Original message preserved in commit body"
    echo "üìù AI tool detected: $primary_tool"
    
    # Re-read the transformed message
    commit_msg=$(cat "$commit_file")
  else
    echo "ü§ñ AI-assisted commit message format detected"
  fi
  
  # Validate required fields in AI-assisted commits
  if ! echo "$commit_msg" | grep -q "Generated by:"; then
    echo "‚ö†Ô∏è  Adding missing 'Generated by' field..."
    echo "" >> "$commit_file"
    echo "Generated by: $primary_tool" >> "$commit_file"
  fi
  
  if ! echo "$commit_msg" | grep -q "Reviewed by:"; then
    echo "‚ö†Ô∏è  Adding missing 'Reviewed by' field..."
    echo "Reviewed by: $author" >> "$commit_file"
  fi
  
  if ! echo "$commit_msg" | grep -q "Scope:"; then
    echo "‚ö†Ô∏è  Adding missing 'Scope' field..."
    echo "Scope: Generated Code" >> "$commit_file"
  fi
  
  # Extract AI tool for logging
  ai_tool=$(echo "$commit_msg" | grep "Generated by:" | sed 's/Generated by: *//' | head -1 | xargs)
  commit_title=$(echo "$commit_msg" | head -1)
  
  # Log AI commit for audit trail
  if [ ! -f .ai-commit-log ]; then
    echo "# AI Commit Log - PAI" > .ai-commit-log
    echo "# Format: Timestamp | Commit Hash | Commit Title | AI Tool | Developer" >> .ai-commit-log
    echo "" >> .ai-commit-log
  fi
  
  echo "$(date '+%Y-%m-%d %H:%M:%S') | pending | $commit_title | $ai_tool | $(whoami)" >> .ai-commit-log
  
  # Clean up flag
  rm -f .git/AI_COMMIT_FLAG
  
  echo "‚úÖ AI-assisted commit validated and logged"
else
  echo "üìù Validating conventional commit format..."
  
  # Validate conventional commit format for non-AI commits
  if ! echo "$commit_msg" | grep -qE "^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+"; then
    echo ""
    echo "‚ùå Error: Commit message must follow conventional commit format"
    echo ""
    echo "Format: type(scope): description"
    echo "Types: feat, fix, docs, style, refactor, test, chore"
    echo ""
    echo "Examples:"
    echo "  feat(dashboard): add KPI filter component"
    echo "  fix(api): resolve data validation issue"
    echo "  docs(readme): update installation instructions"
    echo ""
    exit 1
  fi
  
  echo "‚úÖ Conventional commit format validated"
fi

exit 0
