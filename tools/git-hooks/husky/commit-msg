#!/bin/bash
# Git hook for AI commit detection and enforcement
# This hook scans staged files for AI-generated comments and enforces proper commit message format

commit_msg_file=$1
commit_source=$2
sha1=$3

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to parse and transform commit message
transform_to_ai_assisted() {
    local original_msg="$1"
    local primary_tool="$2"
    local author=$(git config user.name)
    local ai_files_list="$3"
    
    # Remove any leading/trailing whitespace and comments
    original_msg=$(echo "$original_msg" | sed '/^#/d' | sed '/^$/d' | head -1)
    
    # Try to parse conventional commit format - simplified regex
    if [[ $original_msg =~ ^([a-z]+).*:(.+)$ ]]; then
        local type="${BASH_REMATCH[1]}"
        local description="${BASH_REMATCH[2]}"
        
        # Extract scope if present (simple extraction)
        local scope=""
        if [[ "$original_msg" =~ ^\([^\)]+\)\([^\)]*\): ]]; then
            scope=$(echo "$original_msg" | sed 's/^[^(]*(\([^)]*\)).*/\1/')
        fi
        # Clean up description (remove leading/trailing spaces)
        description=$(echo "$description" | sed 's/^ *//' | sed 's/ *$//')
        
        # Determine scope for AI commit
        local ai_scope="Generated Code"
        if [[ -n "$scope" ]]; then
            ai_scope="$scope"
        fi
        
        # Create AI-assisted commit message
        local scope_part=""
        if [[ -n "$scope" ]]; then
            scope_part="($scope)"
        fi
        
        local ai_commit_msg="[AI-ASSISTED] $type$scope_part: $description

Generated by: $primary_tool
Reviewed by: $author
Scope: $ai_scope

Original commit message: $original_msg
AI-generated code found in: $ai_files_list"

    else
        # Not in conventional commit format, create a generic one
        local ai_commit_msg="[AI-ASSISTED] feat: $original_msg

Generated by: $primary_tool
Reviewed by: $author
Scope: Generated Code

Original commit message: $original_msg
AI-generated code found in: $ai_files_list"
    fi
    
    echo "$ai_commit_msg"
}
log_ai_commit() {
    local commit_hash=$(git rev-parse HEAD)
    local author=$(git config user.name)
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    local ai_tool="$1"
    local files="$2"
    
    echo "$timestamp - AI-assisted commit: $(head -1 "$commit_msg_file")" >> .ai-commit-log
    echo "  Tool: $ai_tool" >> .ai-commit-log
    echo "  Developer: $author" >> .ai-commit-log
    echo "  Files: $files" >> .ai-commit-log
    echo "  Commit: $commit_hash" >> .ai-commit-log
    echo "" >> .ai-commit-log
}

# Function to detect AI comments in staged files
detect_ai_comments() {
    local ai_tools_found=()
    local ai_files=()
    
    # Get list of staged files
    local staged_files=$(git diff --cached --name-only --diff-filter=ACM)
    
    for file in $staged_files; do
        if [[ -f "$file" ]]; then
            # Check for AI-generated comments across all file types
            local ai_matches=""
            
            # JavaScript/TypeScript/C/C++/Java style comments
            ai_matches+=$(grep -n "//\s*\[AI-Generated-[A-Za-z]*\]" "$file" 2>/dev/null || echo "")
            
            # Python/Shell/YAML/Ruby style comments
            ai_matches+=$(grep -n "#\s*\[AI-Generated-[A-Za-z]*\]" "$file" 2>/dev/null || echo "")
            
            # Block comments (CSS, SQL, etc.)
            ai_matches+=$(grep -n "/\*\s*\[AI-Generated-[A-Za-z]*\]" "$file" 2>/dev/null || echo "")
            
            # HTML/XML/Markdown comments
            ai_matches+=$(grep -n "<!--\s*\[AI-Generated-[A-Za-z]*\]" "$file" 2>/dev/null || echo "")
            
            # SQL/Lua/Haskell comments
            ai_matches+=$(grep -n "--\s*\[AI-Generated-[A-Za-z]*\]" "$file" 2>/dev/null || echo "")
            
            # LaTeX/MATLAB comments
            ai_matches+=$(grep -n "%\s*\[AI-Generated-[A-Za-z]*\]" "$file" 2>/dev/null || echo "")
            
            # Assembly/Lisp comments
            ai_matches+=$(grep -n ";\s*\[AI-Generated-[A-Za-z]*\]" "$file" 2>/dev/null || echo "")
            
            # JSON special field
            ai_matches+=$(grep -n '"_ai_generated".*\[AI-Generated-[A-Za-z]*\]' "$file" 2>/dev/null || echo "")
            
            if [[ -n "$ai_matches" ]]; then
                ai_files+=("$file")
                
                # Extract AI tool names from all matches
                while IFS= read -r line; do
                    if [[ $line =~ \[AI-Generated-([A-Za-z]+)\] ]]; then
                        local tool="${BASH_REMATCH[1]}"
                        if [[ ! " ${ai_tools_found[@]} " =~ " $tool " ]]; then
                            ai_tools_found+=("$tool")
                        fi
                    fi
                done <<< "$ai_matches"
            fi
        fi
    done
    
    # Remove duplicates from ai_files
    ai_files=($(printf "%s\n" "${ai_files[@]}" | sort -u))
    
    echo "${ai_tools_found[@]}"
    echo "${ai_files[@]}"
}

# Main execution
main() {
    # Skip if this is a merge commit or rebase
    if [[ "$commit_source" == "merge" ]] || [[ "$commit_source" == "rebase" ]]; then
        exit 0
    fi
    
    echo -e "${BLUE}üîç Scanning for AI-generated code...${NC}"
    
    # Detect AI comments
    local detection_result=$(detect_ai_comments)
    local ai_tools=($(echo "$detection_result" | head -1))
    local ai_files=($(echo "$detection_result" | tail -1))
    
    # Read current commit message
    local commit_msg=$(cat "$commit_msg_file")
    
    # Check if AI comments were found
    if [[ ${#ai_tools[@]} -gt 0 ]] && [[ "${ai_tools[0]}" != "" ]]; then
        echo -e "${YELLOW}ü§ñ AI-generated code detected!${NC}"
        echo -e "${BLUE}   Tools found: ${ai_tools[@]}${NC}"
        echo -e "${BLUE}   Files: ${ai_files[@]}${NC}"
        
        # Check if commit message already has AI-ASSISTED tag
        if [[ ! $commit_msg =~ ^\[AI-ASSISTED\] ]]; then
            echo -e "${YELLOW}‚ú® Transforming commit message to AI-assisted format...${NC}"
            
            # Determine primary AI tool (first one found)
            local primary_tool="${ai_tools[0]}"
            
            # Map internal tool names to display names
            case "$primary_tool" in
                "Copilot") primary_tool="GitHub Copilot" ;;
                "Claude") primary_tool="Anthropic Claude" ;;
                "ChatGPT") primary_tool="OpenAI ChatGPT" ;;
                "Gemini") primary_tool="Google Gemini" ;;
                *) primary_tool="$primary_tool" ;;
            esac
            
            # Transform the original commit message
            local files_list=$(IFS=', '; echo "${ai_files[*]}")
            local transformed_msg=$(transform_to_ai_assisted "$commit_msg" "$primary_tool" "$files_list")
            
            # Write the transformed message back to the commit file
            echo "$transformed_msg" > "$commit_msg_file"
            
            echo -e "${GREEN}‚ú® Commit message automatically updated to comply with AI-assisted guidelines!${NC}"
            echo -e "${BLUE}üìã Original message preserved in commit body${NC}"
            echo -e "${YELLOW}üìù AI tool detected: $primary_tool${NC}"
            echo -e "${YELLOW}ÔøΩ AI files: ${ai_files[@]}${NC}"
            
            # Log the AI commit
            log_ai_commit "$primary_tool" "$files_list"
            
            echo -e "${GREEN}‚úÖ AI commit logged successfully${NC}"
        fi
        
        # Validate AI-assisted commit message format (for already properly formatted messages)
        if [[ $commit_msg =~ ^\[AI-ASSISTED\] ]]; then
            echo -e "${GREEN}‚úÖ AI-assisted commit message detected${NC}"
            
            # Check for required fields (only if not auto-generated)
            if ! grep -q "Generated by:" "$commit_msg_file"; then
                echo -e "${YELLOW}‚ö†Ô∏è  Adding missing 'Generated by' field...${NC}"
                # This shouldn't happen with auto-transformation, but just in case
            fi
            
            if ! grep -q "Reviewed by:" "$commit_msg_file"; then
                echo -e "${YELLOW}‚ö†Ô∏è  Adding missing 'Reviewed by' field...${NC}"
                # This shouldn't happen with auto-transformation, but just in case
            fi
            
            # Log the AI commit (if not already logged)
            if [[ ! -f .ai-commit-log ]] || ! grep -q "$(head -1 "$commit_msg_file")" .ai-commit-log; then
                local files_list=$(IFS=', '; echo "${ai_files[*]}")
                log_ai_commit "${ai_tools[0]}" "$files_list"
            fi
            
            echo -e "${GREEN}‚úÖ AI commit validation passed${NC}"
            echo -e "${BLUE}üìã Logged to .ai-commit-log${NC}"
        fi
        
    else
        # No AI comments found, ensure this isn't incorrectly tagged as AI-assisted
        if [[ $commit_msg =~ ^\[AI-ASSISTED\] ]]; then
            echo -e "${RED}‚ùå ERROR: Commit message marked as AI-assisted but no AI comments found${NC}"
            echo -e "${YELLOW}   Either add AI comments to generated code or remove [AI-ASSISTED] tag${NC}"
            exit 1
        fi
        
        echo -e "${GREEN}‚úÖ No AI-generated code detected${NC}"
    fi
}

# Run main function
main

exit 0
